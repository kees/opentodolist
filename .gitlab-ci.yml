variables:
    FEDORA_IMAGE: registry.gitlab.com/rpdev/opentodolist:fedora
    FEDORA_SYSTEM_IMAGE: registry.gitlab.com/rpdev/opentodolist:fedora_system
    WIN32_IMAGE: registry.gitlab.com/rpdev/opentodolist:win32
    WIN64_IMAGE: registry.gitlab.com/rpdev/opentodolist:win64
    MXE_WIN32_IMAGE: registry.gitlab.com/rpdev/opentodolist:win32
    MXE_WIN64_IMAGE: registry.gitlab.com/rpdev/opentodolist:win64
    UBUNTU_IMAGE: registry.gitlab.com/rpdev/opentodolist:ubuntu
    NEXTCLOUD_IMAGE: nextcloud

stages:
  - images
  - build
  - test
  - installer
  - deploy


################################################################################
# Images Stage
################################################################################

# Build the Linux (Fedora) Image
build_image_fedora:
  stage: images
  image: docker:git
  services:
  - docker:dind
  script:
    - cd ci/docker/fedora
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build --pull -t $FEDORA_IMAGE .
    - docker push $FEDORA_IMAGE
  when: manual


# Build the Linux (Fedora) Image including system
# provided optional dependencies:
build_image_fedora_system:
  stage: images
  image: docker:git
  services:
  - docker:dind
  script:
    - cd ci/docker/fedora_system
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build --pull -t $FEDORA_SYSTEM_IMAGE .
    - docker push $FEDORA_SYSTEM_IMAGE
  when: manual


# Build the Linux (Ubuntu) Image
build_image_ubuntu:
  stage: images
  image: docker:git
  services:
  - docker:dind
  script:
    - cd ci/docker/ubuntu
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build --pull -t $UBUNTU_IMAGE .
    - docker push $UBUNTU_IMAGE
  when: manual


# Build the Win32 Image
build_image_win32:
  stage: images
  image: docker:git
  services:
  - docker:dind
  script:
    - cd ci/docker/win32
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build --pull -t $WIN32_IMAGE .
    - docker push $WIN32_IMAGE
  when: manual


# Build the Win64 Image
build_image_win64:
  stage: images
  image: docker:git
  services:
  - docker:dind
  script:
    - cd ci/docker/win64
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build --pull -t $WIN64_IMAGE .
    - docker push $WIN64_IMAGE
  when: manual


################################################################################
# Build Stage
################################################################################

# Linux build & unit tests with built-in libraries
linux_builtin:
  stage: build
  image: $FEDORA_IMAGE
  services:
    - name: $NEXTCLOUD_IMAGE
      alias: nextcloud
  script:
    - curl -d install="true" -d adminlogin=admin -d adminpass=admin http://nextcloud/index.php
    - export QT_QPA_PLATFORM=minimal
    - mkdir build-fedora-builtin
    - cd build-fedora-builtin
    - qmake-qt5 CONFIG+=with_nextcloud_tests NEXTCLOUD_URL=http://nextcloud NEXTCLOUD_USER=admin NEXTCLOUD_PASSWORD=admin ..
    - make -j4
    - make check
  artifacts:
    paths:
      - build-fedora-builtin
    expire_in: 1 week


# Linux build & unit tests with system provides libraries
linux_system:
  stage: build
  image: $FEDORA_SYSTEM_IMAGE
  services:
    - name: $NEXTCLOUD_IMAGE
      alias: nextcloud
  script:
    - curl -d install="true" -d adminlogin=admin -d adminpass=admin http://nextcloud/index.php
    - export QT_QPA_PLATFORM=minimal
    - mkdir build-fedora-system
    - cd build-fedora-system
    - qmake-qt5 CONFIG+=with_nextcloud_tests NEXTCLOUD_URL=http://nextcloud NEXTCLOUD_USER=admin NEXTCLOUD_PASSWORD=admin ..
    - make -j4
    - make check
  artifacts:
    paths:
      - build-fedora-system
    expire_in: 1 week


# Ubuntu build including AppImage
ubuntu_appimage:
  stage: build
  image: $UBUNTU_IMAGE
  services:
    - name: $NEXTCLOUD_IMAGE
      alias: nextcloud
  script:
    - ci/ubuntu-build.sh
  artifacts:
    paths:
      - build-ubuntu/OpenTodoList-x86_64.AppImage
    expire_in: 1 week


# Windows 32bit build
win32_build:
  stage: build
  image: $MXE_WIN32_IMAGE
  script:
    - ./ci/win32-build.sh
  artifacts:
    paths:
      - deploy-win32/OpenTodoList-Windows-32bit.exe
    expire_in: 1 week


# Windows 64bit build
win64_build:
  stage: build
  image: $MXE_WIN64_IMAGE
  script:
    - ./ci/win64-build.sh
  artifacts:
    paths:
      - deploy-win64/OpenTodoList-Windows-64bit.exe
    expire_in: 1 week


# Windows Visual Studio 32bit Build
win32_vs_build:
  stage: build
  tags:
    - windows
  script:
    - .\\ci\\windows\\windows-msvc17-x32.bat
  artifacts:
    paths:
      - build-win32-vs
    expire_in: 1 week
  when: manual


# Windows Visual Studio 64bit Build
win64_vs_build:
  stage: build
  tags:
    - windows
  script:
    - .\\ci\\windows\\windows-msvc17-x64.bat
  artifacts:
    paths:
      - build-win64-vs
    expire_in: 1 week
  when: manual


# macOS build:
macos:
  stage: build
  tags:
    - macos
  script:
    - ci/macos-build.sh
  artifacts:
    paths:
      - build-macos/app/OpenTodoList.dmg
    expire_in: 1 week
  when: manual


################################################################################
# Installer Stage
################################################################################


win32_vs_installer:
    stage: installer
    image: fedora
    dependencies:
        - win32_vs_build
    script:
        - yum install -y mingw32-nsis
        - cp templates/nsis/win32-installer.nsis build-win32-vs/
        - cd build-win32-vs/
        - makensis win32-installer.nsis
    artifacts:
        paths:
            - build-win32-vs/*.exe
        expire_in: 1 week
    when: manual


win64_vs_installer:
    stage: installer
    image: fedora
    dependencies:
        - win64_vs_build
    script:
        - yum install -y mingw32-nsis
        - cp templates/nsis/win64-installer.nsis build-win64-vs/
        - cd build-win64-vs
        - makensis win64-installer.nsis
    artifacts:
        paths:
            - build-win64-vs/*.exe
        expire_in: 1 week
    when: manual


################################################################################
# Images Stage
################################################################################


github:
    stage: deploy
    image: fedora
    script:
        - yum install -y --nogpgcheck python3 python3-requests
        - mkdir uploads
        - cp build-ubuntu/OpenTodoList-x86_64.AppImage uploads
        - cp deploy-win32/OpenTodoList-Windows-32bit.exe uploads
        - cp deploy-win64/OpenTodoList-Windows-64bit.exe uploads
        - cp build-win32-vs/OpenTodoList-Windows-32bit.exe uploads/OpenTodoList-Windows-MVSC-32bit.exe || echo "Skip deploying MSVC 32bit installer"
        - cp build-win64-vs/OpenTodoList-Windows-64bit.exe uploads/OpenTodoList-Windows-MVSC-64bit.exe || echo "Skip deploying MSVC 64bit installer"
        - cp build-macos/app/OpenTodoList.dmg uploads
        - ./ci/github-upload.py mhoeher opentodolist continuous $CI_COMMIT_REF_NAME $GITHUB_ACCESS_TOKEN ./uploads/*
    when: manual
    only:
        - tags


homepage:
    image: ruby:2.3
    variables:
      JEKYLL_ENV: production

pages:
  stage: deploy
  script:
      - cd homepage/opentodolist
      - bundle install
      - bundle exec jekyll build -d public
  artifacts:
    paths:
    - homepage/opentodolist/public
  #only:
  #- master
